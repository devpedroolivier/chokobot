from datetime import datetime
from app.models.clientes import salvar_cliente
from app.utils.mensagens import responder_usuario, is_saudacao
from app.services.encomendas import processar_encomenda
from app.services.cafeteria import processar_cafeteria
from app.services.entregas import processar_entrega
from app.services.atendimento import processar_atendimento
from app.services.estados import estados_encomenda, estados_entrega, estados_cafeteria


CANCELAR_OPCOES = ["cancelar", "sair", "parar", "desistir"]

async def processar_mensagem(mensagem: dict):
    texto = mensagem.get("text", {}).get("message", "").lower().strip()
    telefone = mensagem.get("phone")
    nome_cliente = mensagem.get("chatName", "Nome n√£o informado")

    if not telefone or not texto:
        print("‚ùå Dados incompletos:", mensagem)
        return

    # Cancelar qualquer processo ativo
    if texto in CANCELAR_OPCOES:
        if telefone in estados_encomenda:
            estados_encomenda.pop(telefone)
            await responder_usuario(telefone, "‚ùå Encomenda cancelada com sucesso.")
        elif telefone in estados_cafeteria:
            estados_cafeteria.pop(telefone)
            await responder_usuario(telefone, "‚ùå Pedido da cafeteria cancelado com sucesso.")
        elif telefone in estados_entrega:
            estados_entrega.pop(telefone)
            await responder_usuario(telefone, "‚ùå Solicita√ß√£o de entrega cancelada com sucesso.")
        else:
            await responder_usuario(telefone, "‚ö†Ô∏è Nenhuma opera√ß√£o em andamento para cancelar.")
        return

       # Entregas ‚Äî DEVE vir primeiro
    if telefone in estados_entrega:
        resultado = await processar_entrega(telefone, texto, estados_entrega[telefone])
        if resultado == "finalizar":
            estados_entrega.pop(telefone)
        return

    # Encomendas
    if telefone in estados_encomenda:
        resultado = await processar_encomenda(telefone, texto, estados_encomenda[telefone], nome_cliente)
        if resultado == "finalizar":
            estados_encomenda.pop(telefone)
        return

    # Cafeteria
    if telefone in estados_cafeteria:
        resultado = await processar_cafeteria(telefone, texto, estados_cafeteria[telefone])
        if resultado == "voltar_menu":
            estados_cafeteria.pop(telefone)
            await responder_usuario(
                telefone,
                "üç´ Ol√° novamente! Escolha uma op√ß√£o:\n"
                "1Ô∏è‚É£ Ver card√°pio\n"
                "2Ô∏è‚É£ Encomendar bolos\n"
                "3Ô∏è‚É£ Pedidos da cafeteria\n"
                "4Ô∏è‚É£ Entregas\n"
                "5Ô∏è‚É£ Falar com atendente"
            )
        elif resultado == "finalizar":
            estados_cafeteria.pop(telefone)
        return


    # Sauda√ß√µes ou entrada no menu
    salvar_cliente(telefone, nome_cliente)

    if is_saudacao(texto):
        await responder_usuario(
            telefone,
            "üç´ Ol√°! Bem-vindo(a) √† Chokodel√≠cia üç´\n"
            "Sou a Trufinha üç¨, assistente virtual da nossa cafeteria e confeitaria!\n\n"
            "Escolha uma op√ß√£o:\n"
            "1Ô∏è‚É£ Ver card√°pio\n"
            "2Ô∏è‚É£ Encomendar bolos\n"
            "3Ô∏è‚É£ Pedidos da cafeteria\n"
            "4Ô∏è‚É£ Entregas\n"
            "5Ô∏è‚É£ Falar com atendente"
        )
        return

    # Menu principal
    if texto in ["1", "card√°pio", "cardapio"]:
        estados_cafeteria[telefone] = {"subetapa": "aguardando_cardapio"}
        await responder_usuario(
            telefone,
            "üìã Qual card√°pio voc√™ deseja ver?\n"
            "1Ô∏è‚É£ Card√°pio Cafeteria\n"
            "2Ô∏è‚É£ Card√°pio Bolos\n"
            "3Ô∏è‚É£ Card√°pio Doces\n"
            "4Ô∏è‚É£ Card√°pio Sazonais"
        )

    elif texto in ["2", "bolo", "encomendar", "encomendas"]:
        estados_encomenda[telefone] = {"etapa": 1, "dados": {}}
        await responder_usuario(
            telefone,
            "üéÇ *Vamos come√ßar sua encomenda!*\n\n"
            "Qual linha de bolo voc√™ deseja?\n"
            "1Ô∏è‚É£ Montar bolo personalizado\n"
            "2Ô∏è‚É£ Linha Gourmet\n"
            "3Ô∏è‚É£ Bolos Redondos (P6)\n"
            "4Ô∏è‚É£ Tortas\n"
            "5Ô∏è‚É£ *Pronta Entrega* ‚Äî ver sabores dispon√≠veis hoje\n\n"
            "üì∑ Para ver fotos e pre√ßos, consulte nosso card√°pio: https://keepo.io/boloschoko/"
        )


    elif texto in ["3", "pedido", "cafeteria"]:
        estados_cafeteria[telefone] = {"itens": [], "nome": nome_cliente}
        await responder_usuario(
            telefone,
            "‚òï Vamos anotar seu pedido!\n"
            "Digite o que voc√™ deseja da cafeteria (ex: cappuccino, p√£o de queijo).\n"
            "Digite *finalizar* quando terminar seu pedido."
        )

    elif texto in ["4", "entrega", "informa√ß√µes de entrega"]:
        await responder_usuario(
            telefone,
            "üöö Entregamos na cidade toda (R$10).\n"
            "Para outras regi√µes, o valor depende da dist√¢ncia (via Uber).\n"
            "Hor√°rio de entregas: 10h √†s 18h."
        )


    elif texto in ["5", "atendente", "humano"]:
        await processar_atendimento(telefone, nome_cliente)

    else:
        await responder_usuario(
            telefone,
            "Desculpe, n√£o entendi sua mensagem üòï\n"
            "Digite uma das op√ß√µes abaixo:\n"
            "1Ô∏è‚É£ Ver card√°pio\n"
            "2Ô∏è‚É£ Encomendar bolos\n"
            "3Ô∏è‚É£ Pedidos da cafeteria\n"
            "4Ô∏è‚É£ Entregas\n"
            "5Ô∏è‚É£ Falar com atendente"
        )
